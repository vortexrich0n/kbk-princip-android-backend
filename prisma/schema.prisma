generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  email                 String                 @unique
  passwordHash          String
  name                  String?
  role                  String                 @default("USER")
  qrData                String?
  createdAt             DateTime               @default(now())
  emailVerified         Boolean                @default(false)
  verificationToken     String?                @unique
  verificationExpires   DateTime?
  resetToken            String?                @unique
  resetTokenExpires     DateTime?
  checkins              Checkin[]
  membership            Membership?
  attendances           Attendance[]
  notificationSettings  NotificationSettings?
}

model Membership {
  id         String    @id @default(cuid())
  userId     String    @unique
  active     Boolean   @default(false)
  expiresAt  DateTime?
  plan       String?
  type       String    @default("Basic")
  paidAt     DateTime?
  paidAmount Float?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Checkin {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  via       String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Attendance {
  id           String    @id @default(cuid())
  userId       String
  checkInTime  DateTime  @default(now())
  checkOutTime DateTime?
  qrCode       String?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, checkInTime])
}

model NotificationSettings {
  id                   String   @id @default(cuid())
  userId               String   @unique
  membershipExpiry     Boolean  @default(true)
  trainingReminder     Boolean  @default(true)
  promotions           Boolean  @default(true)
  arrivalConfirmation  Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

